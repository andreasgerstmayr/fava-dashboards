dashboards:
- name: Overview
  panels:
  - title: Assets 💰
    width: 50%
    height: 80px
    queries:
    - bql: SELECT CONVERT(SUM(position), '{{ledger.ccy}}') AS value WHERE account ~ '^Assets:'
    type: html
    script: |
      const currencyFormat = new Intl.NumberFormat(undefined, {
        style: "currency",
        currency: ledger.ccy,
        maximumFractionDigits: 0,
      });
      const value = currencyFormat.format(panel.queries[0].result[0].value[ledger.ccy]);
      return `<div style="font-size: 40px; font-weight: bold; color: #3daf46; text-align: center;">${value}</div>`;

  - title: Liabilities 💳
    width: 50%
    height: 80px
    queries:
    - bql: SELECT CONVERT(SUM(position), '{{ledger.ccy}}') AS value WHERE account ~ '^Liabilities:'
    type: html
    script: |
      const currencyFormat = new Intl.NumberFormat(undefined, {
        style: "currency",
        currency: ledger.ccy,
        maximumFractionDigits: 0,
      });
      const value = currencyFormat.format(-panel.queries[0].result[0].value[ledger.ccy]);
      return `<div style="font-size: 40px; font-weight: bold; color: #af3d3d; text-align: center;">${value}</div>`;

  - title: Income/Expenses 💸
    height: 520px
    queries:
    - name: Income
      stack: income
      bql: |
        SELECT year, month, CONVERT(SUM(position), '{{ledger.ccy}}', LAST(date)) AS value
        WHERE account ~ '^Income:'
        GROUP BY year, month
      link: /beancount/account/Income/?time={time}
    - name: Home
      stack: expenses
      bql: |
        SELECT year, month, CONVERT(SUM(position), '{{ledger.ccy}}', LAST(date)) AS value
        WHERE account ~ '^Expenses:Home:'
        GROUP BY year, month
      link: /beancount/account/Expenses:Home/?time={time}
    - name: Food
      stack: expenses
      bql: |
        SELECT year, month, CONVERT(SUM(position), '{{ledger.ccy}}', LAST(date)) AS value
        WHERE account ~ '^Expenses:Food:'
        GROUP BY year, month
      link: /beancount/account/Expenses:Food/?time={time}
    - name: Travel
      stack: expenses
      bql: |
        SELECT year, month, CONVERT(SUM(position), '{{ledger.ccy}}', LAST(date)) AS value
        WHERE account ~ '^Expenses:' AND 'travel' IN tags
        GROUP BY year, month
      link: /beancount/account/Expenses/?filter=#travel&time={time}
    - name: Other
      stack: expenses
      bql: |
        SELECT year, month, CONVERT(SUM(position), '{{ledger.ccy}}', LAST(date)) AS value
        WHERE account ~ '^Expenses:' AND NOT account ~ '^Expenses:(Home|Food):' AND NOT 'travel' IN tags
        GROUP BY year, month
      link: /beancount/account/Expenses/?filter=all(-account:"^Expenses:(Home|Food)") -#travel&time={time}
    type: echarts
    script: &stacked_barcharts |
      const currencyFormat = new Intl.NumberFormat(undefined, {
        style: "currency",
        currency: ledger.ccy,
        maximumFractionDigits: 0,
      });
      const months = helpers.iterateMonths(ledger.dateFirst, ledger.dateLast).map((m) => `${m.month}/${m.year}`);

      // the beancount query only returns months where there was at least one matching transaction, therefore we group by month
      const amounts = {};
      for (let query of panel.queries) {
        amounts[query.name] = {};
        for (let row of query.result) {
          amounts[query.name][`${row.month}/${row.year}`] =
            query.stack == "income" ? -row.value[ledger.ccy] : row.value[ledger.ccy];
        }
      }

      const series = panel.queries.map((query) => ({
        type: "bar",
        name: query.name,
        stack: query.stack,
        data: months.map((month) => amounts[query.name][month] ?? 0),
      }));

      return {
        tooltip: {
          valueFormatter: currencyFormat.format,
        },
        legend: {
          top: "bottom",
        },
        xAxis: {
          data: months,
        },
        yAxis: {
          axisLabel: {
            formatter: currencyFormat.format,
          },
        },
        series,
        onClick: (event) => {
          const query = panel.queries.find((q) => q.name === event.seriesName);
          if (query) {
            const [month, year] = event.name.split("/");
            const link = query.link.replaceAll("#", "%23").replace("{time}", `${year}-${month.padStart(2, "0")}`);
            window.open(link);
          }
        },
      };

- name: Assets
  panels:
  - title: Assets 🏦
    width: 50%
    queries:
    - bql: |
        SELECT UNITS(SUM(position)) as units, CONVERT(SUM(position), '{{ledger.ccy}}') as market_value
        WHERE account_sortkey(account) ~ '^[01]'
        GROUP BY currency, cost_currency
        ORDER BY market_value
      link: /beancount/account/{account}/?time={time}
    type: echarts
    script: |
      const currencyFormat = new Intl.NumberFormat(undefined, {
        style: "currency",
        currency: ledger.ccy,
        maximumFractionDigits: 0,
      });

      const data = panel.queries[0].result
        .filter((row) => row.market_value[ledger.ccy])
        .map((row) => ({ name: Object.keys(row.units)[0], value: row.market_value[ledger.ccy] }));

      return {
        tooltip: {
          formatter: (params) =>
            `${params.marker} ${
              ledger.commodities[params.name]?.meta.name ?? params.name
            } <span style="padding-left: 15px; font-weight: bold;">${currencyFormat.format(
              params.value
            )}</span> (${params.percent.toFixed(0)}%)`,
        },
        series: [
          {
            type: "pie",
            data,
          },
        ],
      };

  - title: Net Worth 💰
    width: 50%
    queries:
    - bql: |
        SELECT year, month,
        CONVERT(LAST(balance), '{{ledger.ccy}}', DATE_ADD(YMONTH(DATE_ADD(YMONTH(FIRST(date)), 31)), -1)) AS value
        WHERE account_sortkey(account) ~ '^[01]'
        GROUP BY year, month
      link: /beancount/balance_sheet/?time={time}
    type: echarts
    script: |
      const currencyFormat = new Intl.NumberFormat(undefined, {
        style: "currency",
        currency: ledger.ccy,
        maximumFractionDigits: 0,
      });
      const months = helpers.iterateMonths(ledger.dateFirst, ledger.dateLast).map((m) => `${m.month}/${m.year}`);
      const amounts = {};

      // the beancount query only returns months where there was at least one matching transaction, therefore we group by month
      for (let row of panel.queries[0].result) {
        amounts[`${row.month}/${row.year}`] = row.value[ledger.ccy];
      }

      return {
        tooltip: {
          valueFormatter: currencyFormat.format,
        },
        xAxis: {
          data: months,
        },
        yAxis: {
          axisLabel: {
            formatter: currencyFormat.format,
          },
        },
        series: [
          {
            type: "line",
            smooth: true,
            connectNulls: true,
            data: months.map((month) => amounts[month]),
          },
        ],
        onClick: (event) => {
          if (!panel.queries[0].link) return;
          const [month, year] = event.name.split("/");
          const link = panel.queries[0].link.replaceAll("#", "%23").replace("{time}", `${year}-${month.padStart(2, "0")}`);
          window.open(link);
        },
      };

  - title: Portfolio 📈
    width: 50%
    queries:
    - bql: &portfolio_bql |
        SELECT year, month,
        CONVERT(LAST(balance),       '{{ledger.ccy}}', DATE_ADD(YMONTH(DATE_ADD(YMONTH(FIRST(date)), 31)), -1)) AS market_value,
        CONVERT(COST(LAST(balance)), '{{ledger.ccy}}', DATE_ADD(YMONTH(DATE_ADD(YMONTH(FIRST(date)), 31)), -1)) AS book_value
        WHERE account ~ '^Assets:' AND currency != '{{ledger.ccy}}'
        GROUP BY year, month
    type: echarts
    script: |
      const currencyFormat = new Intl.NumberFormat(undefined, {
        style: "currency",
        currency: ledger.ccy,
        maximumFractionDigits: 0,
      });
      const months = helpers.iterateMonths(ledger.dateFirst, ledger.dateLast).map((m) => `${m.month}/${m.year}`);
      const amounts = {};

      // the beancount query only returns months where there was at least one matching transaction, therefore we group by month
      for (let row of panel.queries[0].result) {
        amounts[`${row.month}/${row.year}`] = {
          market_value: row.market_value[ledger.ccy],
          book_value: row.book_value[ledger.ccy],
        };
      }

      return {
        tooltip: {
          valueFormatter: currencyFormat.format,
        },
        legend: {
          top: "bottom",
        },
        xAxis: {
          data: months,
        },
        yAxis: {
          axisLabel: {
            formatter: currencyFormat.format,
          },
        },
        series: [
          {
            type: "line",
            name: "Market Value",
            smooth: true,
            connectNulls: true,
            data: months.map((month) => amounts[month]?.market_value),
          },
          {
            type: "line",
            name: "Book Value",
            smooth: true,
            connectNulls: true,
            data: months.map((month) => amounts[month]?.book_value),
          },
        ],
        onClick: (event) => {
          if (!panel.queries[0].link) return;
          const [month, year] = event.name.split("/");
          const link = panel.queries[0].link.replaceAll("#", "%23").replace("{time}", `${year}-${month.padStart(2, "0")}`);
          window.open(link);
        },
      };

  - title: Portfolio Gains ✨
    width: 50%
    queries:
    - bql: *portfolio_bql
    type: echarts
    script: |
      const currencyFormat = new Intl.NumberFormat(undefined, {
        style: "currency",
        currency: ledger.ccy,
        maximumFractionDigits: 0,
      });
      const months = helpers.iterateMonths(ledger.dateFirst, ledger.dateLast).map((m) => `${m.month}/${m.year}`);
      const amounts = {};

      // the beancount query only returns months where there was at least one matching transaction, therefore we group by month
      for (let row of panel.queries[0].result) {
        amounts[`${row.month}/${row.year}`] = row.market_value[ledger.ccy] - row.book_value[ledger.ccy];
      }

      return {
        tooltip: {
          valueFormatter: currencyFormat.format,
        },
        xAxis: {
          data: months,
        },
        yAxis: {
          axisLabel: {
            formatter: currencyFormat.format,
          },
        },
        series: [
          {
            type: "line",
            smooth: true,
            connectNulls: true,
            data: months.map((month) => amounts[month]),
          },
        ],
      };

  - title: Asset Classes 🏦
    width: 50%
    queries:
    - bql: |
        SELECT UNITS(SUM(position)) as units, CONVERT(SUM(position), '{{ledger.ccy}}') as market_value
        WHERE account_sortkey(account) ~ '^[01]'
        GROUP BY currency, cost_currency
        ORDER BY market_value
    type: echarts
    script: &asset_classes |
      const currencyFormat = new Intl.NumberFormat(undefined, {
        style: "currency",
        currency: ledger.ccy,
        maximumFractionDigits: 0,
      });

      let totalValue = 0;
      const assetClasses = {};
      for (let row of panel.queries[0].result) {
        if (!row.market_value[ledger.ccy]) continue;

        const ccy = Object.keys(row.units)[0];
        const value = row.market_value[ledger.ccy];
        const assetName = ledger.commodities[ccy]?.meta.name ?? ccy;
        const assetClass = ledger.commodities[ccy]?.meta.asset_class ?? "undefined";
        if (!(assetClass in assetClasses)) {
          assetClasses[assetClass] = { name: assetClass, children: [] };
        }
        assetClasses[assetClass].children.push({ name: assetName, value });
        totalValue += value;
      }

      return {
        tooltip: {
          formatter: (params) =>
            `${params.marker} ${params.name} <span style="padding-left: 15px; font-weight: bold;">${currencyFormat.format(
              params.value
            )}</span> (${((params.value / totalValue) * 100).toFixed(0)}%)`,
        },
        series: [
          {
            type: "sunburst",
            radius: "100%",
            label: {
              show: false,
            },
            data: Object.values(assetClasses),
          },
        ],
      };

  - title: Investment Classes 🏦
    width: 50%
    queries:
    - bql: |
        SELECT UNITS(SUM(position)) as units, CONVERT(SUM(position), '{{ledger.ccy}}') as market_value
        WHERE account_sortkey(account) ~ '^[01]' AND currency != '{{ledger.ccy}}'
        GROUP BY currency, cost_currency
        ORDER BY market_value
    type: echarts
    script: *asset_classes

  - title: Assets Allocation 🏦
    width: 50%
    queries:
    - bql: |
        SELECT UNITS(SUM(position)) as units, CONVERT(SUM(position), '{{ledger.ccy}}') as market_value
        WHERE account_sortkey(account) ~ '^[01]'
        GROUP BY currency, cost_currency
        ORDER BY market_value
    type: echarts
    script: &assets_allocation |
      const currencyFormat = new Intl.NumberFormat(undefined, {
        style: "currency",
        currency: ledger.ccy,
        maximumFractionDigits: 0,
      });

      let totalValue = 0;
      const root = { children: [] };
      for (let row of panel.queries[0].result) {
        if (!row.market_value[ledger.ccy]) continue;

        const ccy = Object.keys(row.units)[0];
        const allocations = Object.entries(ledger.commodities[ccy]?.meta ?? {}).filter(([k, v]) =>
          k.startsWith("asset_allocation_")
        );
        if (allocations.length === 0) {
          allocations.push(["asset_allocation_Unknown", 100]);
        }

        for (let [allocation, percentage] of allocations) {
          const parts = allocation.substr("asset_allocation_".length).split("_");
          let node = root;
          for (const part of parts) {
            let child = node.children.find((c) => c.name == part);
            if (!child) {
              child = { name: part, children: [] };
              node.children.push(child);
            }
            node = child;
          }

          const value = (percentage / 100) * row.market_value[ledger.ccy];
          node.value = (node.value ?? 0) + value;
          totalValue += value;
        }
      }

      return {
        tooltip: {
          formatter: (params) =>
            `${params.marker} ${params.name} <span style="padding-left: 15px; font-weight: bold;">${currencyFormat.format(
              params.value
            )}</span> (${((params.value / totalValue) * 100).toFixed(0)}%)`,
        },
        series: [
          {
            type: "sunburst",
            radius: "100%",
            label: {
              rotate: "tangential",
              minAngle: 20,
            },
            labelLayout: {
              hideOverlap: true,
            },
            data: root.children,
          },
        ],
      };

  - title: Investments Allocation 🏦
    width: 50%
    queries:
    - bql: |
        SELECT UNITS(SUM(position)) as units, CONVERT(SUM(position), '{{ledger.ccy}}') as market_value
        WHERE account_sortkey(account) ~ '^[01]' AND currency != '{{ledger.ccy}}'
        GROUP BY currency, cost_currency
        ORDER BY market_value
    type: echarts
    script: *assets_allocation

- name: Income and Expenses
  panels:
  - title: Avg. Income per Month 💰
    width: 33.3%
    height: 80px
    queries:
    - bql: SELECT CONVERT(SUM(position), '{{ledger.ccy}}') AS value WHERE account ~ '^Income:'
    type: html
    script: |
      const currencyFormat = new Intl.NumberFormat(undefined, {
        style: "currency",
        currency: ledger.ccy,
        maximumFractionDigits: 0,
      });
      const days = (new Date(ledger.dateLast) - new Date(ledger.dateFirst)) / (1000 * 60 * 60 * 24) + 1;
      const months = days / (365 / 12);
      const value = currencyFormat.format(-panel.queries[0].result[0].value[ledger.ccy] / months);
      return `<div style="font-size: 40px; font-weight: bold; color: #3daf46; text-align: center;">${value}</div>`;

  - title: Avg. Expenses per Month 💸
    width: 33.3%
    height: 80px
    queries:
    - bql: SELECT CONVERT(SUM(position), '{{ledger.ccy}}') AS value WHERE account ~ '^Expenses:'
    type: html
    script: |
      const currencyFormat = new Intl.NumberFormat(undefined, {
        style: "currency",
        currency: ledger.ccy,
        maximumFractionDigits: 0,
      });
      const days = (new Date(ledger.dateLast) - new Date(ledger.dateFirst)) / (1000 * 60 * 60 * 24) + 1;
      const months = days / (365 / 12);
      const value = currencyFormat.format(panel.queries[0].result[0].value[ledger.ccy] / months);
      return `<div style="font-size: 40px; font-weight: bold; color: #af3d3d; text-align: center;">${value}</div>`;

  - title: Avg. Savings per Month ✨
    width: 33.3%
    height: 80px
    queries:
    - bql: SELECT CONVERT(SUM(position), '{{ledger.ccy}}') AS value WHERE account ~ '^Income:'
    - bql: SELECT CONVERT(SUM(position), '{{ledger.ccy}}') AS value WHERE account ~ '^Expenses:'
    type: html
    script: |
      const currencyFormat = new Intl.NumberFormat(undefined, {
        style: "currency",
        currency: ledger.ccy,
        maximumFractionDigits: 0,
      });
      const percentFormat = new Intl.NumberFormat(undefined, {
        style: "percent",
        maximumFractionDigits: 0,
      });
      const days = (new Date(ledger.dateLast) - new Date(ledger.dateFirst)) / (1000 * 60 * 60 * 24) + 1;
      const months = days / (365 / 12);
      const income = -panel.queries[0].result[0].value[ledger.ccy];
      const expenses = panel.queries[1].result[0].value[ledger.ccy];
      const rate = (income - expenses) / months;
      const ratePercent = 1 - expenses / income;
      const value = `${currencyFormat.format(rate)} (${percentFormat.format(ratePercent)})`;
      return `<div style="font-size: 40px; font-weight: bold; color: #3daf46; text-align: center;">${value}</div>`;

  - title: Income Categories 💸
    width: 50%
    queries:
    - bql: |
        SELECT account, CONVERT(SUM(position), '{{ledger.ccy}}') AS value
        WHERE account ~ '^Income:'
        GROUP BY account
      link: /beancount/account/{account}/?time={time}
    type: echarts
    script: |
      const currencyFormat = new Intl.NumberFormat(undefined, {
        style: "currency",
        currency: ledger.ccy,
        maximumFractionDigits: 0,
      });
      const maxLevels = 3;

      const root = { children: [] };
      for (let row of panel.queries[0].result) {
        const accountParts = row.account.split(":");
        let node = root;
        for (let i = 0; i < accountParts.length && i <= maxLevels; i++) {
          const part = accountParts[i];
          let child = node.children.find((c) => c.name == part);
          if (!child) {
            child = { name: part, children: [] };
            node.children.push(child);
          }
          node = child;
        }
        node.value = (node.value ?? 0) + -row.value[ledger.ccy];
      }

      return {
        tooltip: {
          valueFormatter: currencyFormat.format,
        },
        series: [
          {
            type: "sunburst",
            radius: "100%",
            label: {
              minAngle: 20,
            },
            nodeClick: false,
            data: root.children[0].children,
          },
        ],
        onClick: (event) => {
          const account = "Income" + event.treePathInfo.map((i) => i.name).join(":");
          const time = new URLSearchParams(window.location.search).get("time") ?? "";
          const link = panel.queries[0].link.replaceAll("#", "%23").replace("{account}", account).replace("{time}", time);
          window.open(link);
        },
      };

  - title: Expenses Categories 💸
    width: 50%
    queries:
    - bql: |
        SELECT account, CONVERT(SUM(position), '{{ledger.ccy}}') AS value
        WHERE account ~ '^Expenses:'
        GROUP BY account
      link: /beancount/account/{account}/?time={time}
    type: echarts
    script: |
      const currencyFormat = new Intl.NumberFormat(undefined, {
        style: "currency",
        currency: ledger.ccy,
        maximumFractionDigits: 0,
      });
      const maxLevels = 2;

      const root = { children: [] };
      for (let row of panel.queries[0].result) {
        const accountParts = row.account.split(":");
        let node = root;
        for (let i = 0; i < accountParts.length && i <= maxLevels; i++) {
          const part = accountParts[i];
          let child = node.children.find((c) => c.name == part);
          if (!child) {
            child = { name: part, children: [] };
            node.children.push(child);
          }
          node = child;
        }
        node.value = (node.value ?? 0) + row.value[ledger.ccy];
      }

      return {
        tooltip: {
          valueFormatter: currencyFormat.format,
        },
        series: [
          {
            type: "sunburst",
            radius: "100%",
            label: {
              minAngle: 20,
            },
            nodeClick: false,
            data: root.children[0].children,
          },
        ],
        onClick: (event) => {
          const account = "Expenses" + event.treePathInfo.map((i) => i.name).join(":");
          const time = new URLSearchParams(window.location.search).get("time") ?? "";
          const link = panel.queries[0].link.replaceAll("#", "%23").replace("{account}", account).replace("{time}", time);
          window.open(link);
        },
      };

  - title: Recurring Expenses 🔁
    width: 50%
    queries:
    - name: Recurring
      stack: expenses
      bql: |
        SELECT year, month, CONVERT(SUM(position), '{{ledger.ccy}}', LAST(date)) AS value
        WHERE account ~ '^Expenses:' AND 'recurring' IN tags
        GROUP BY year, month
      link: /beancount/account/Expenses/?filter=#recurring&time={time}
    - name: Irregular
      stack: expenses
      bql: |
        SELECT year, month, CONVERT(SUM(position), '{{ledger.ccy}}', LAST(date)) AS value
        WHERE account ~ '^Expenses:' AND NOT 'recurring' IN tags
        GROUP BY year, month
      link: /beancount/account/Expenses/?filter=-#recurring&time={time}
    type: echarts
    script: *stacked_barcharts

  - title: Food Expenses 🥐
    width: 50%
    queries:
    - bql: |
        SELECT year, month, CONVERT(SUM(position), '{{ledger.ccy}}', LAST(date)) AS value
        WHERE account ~ '^Expenses:Food:'
        GROUP BY year, month
      link: /beancount/account/Expenses:Food/?time={time}
    type: echarts
    script: |
      const currencyFormat = new Intl.NumberFormat(undefined, {
        style: "currency",
        currency: ledger.ccy,
        maximumFractionDigits: 0,
      });
      const months = helpers.iterateMonths(ledger.dateFirst, ledger.dateLast).map((m) => `${m.month}/${m.year}`);
      const amounts = {};

      // the beancount query only returns months where there was at least one matching transaction, therefore we group by month
      for (let row of panel.queries[0].result) {
        amounts[`${row.month}/${row.year}`] = row.value[ledger.ccy];
      }

      return {
        tooltip: {
          valueFormatter: currencyFormat.format,
        },
        xAxis: {
          data: months,
        },
        yAxis: {
          axisLabel: {
            formatter: currencyFormat.format,
          },
        },
        series: [
          {
            type: "line",
            smooth: true,
            data: months.map((month) => amounts[month] ?? 0),
          },
        ],
        onClick: (event) => {
          const [month, year] = event.name.split("/");
          const link = panel.queries[0].link.replaceAll("#", "%23").replace("{time}", `${year}-${month.padStart(2, "0")}`);
          window.open(link);
        },
      };

  - title: Top 5 biggest expenses
    queries:
    - bql: SELECT date, payee, narration, position WHERE account ~ "^Expenses:" ORDER BY position DESC LIMIT 5
    type: jinja2
    template: |
      {% import "_query_table.html" as querytable %}
      {{ querytable.querytable(favaledger, None, panel.queries[0].result_types, panel.queries[0].result) }}

- name: Travelling
  panels:
  - title: Travel Costs per Year 📅
    # Note: Holidays over New Year's Eve are counted in both years aliquot.
    queries:
    - bql: |
        SELECT year, CONVERT(SUM(position), '{{ledger.ccy}}', LAST(date)) AS value
        WHERE account ~ '^Expenses:' AND 'travel' IN tags
        GROUP BY year
      link: /beancount/account/Expenses/?filter=#travel&time={time}
    type: echarts
    script: |
      const currencyFormat = new Intl.NumberFormat(undefined, {
        style: "currency",
        currency: ledger.ccy,
        maximumFractionDigits: 0,
      });
      const years = helpers.iterateYears(ledger.dateFirst, ledger.dateLast);
      const amounts = {};

      // the beancount query only returns months where there was at least one matching transaction, therefore we group by year
      for (let row of panel.queries[0].result) {
        amounts[row.year] = row.value[ledger.ccy];
      }

      return {
        tooltip: {
          valueFormatter: currencyFormat.format,
        },
        xAxis: {
          data: years,
        },
        yAxis: {
          axisLabel: {
            formatter: currencyFormat.format,
          },
        },
        series: [
          {
            type: "line",
            smooth: true,
            data: years.map((year) => amounts[year] ?? 0),
          },
        ],
        onClick: (event) => {
          const link = panel.queries[0].link.replaceAll("#", "%23").replace("{time}", event.name);
          window.open(link);
        },
      };

  - title: Destinations ✈️
    height: 300px
    queries:
    - bql: |
        SELECT tags, CONVERT(position, '{{ledger.ccy}}') AS value
        WHERE account ~ '^Expenses:' AND 'travel' IN tags
        ORDER BY date
      link: /beancount/account/Expenses/?filter=#{travel}
    type: echarts
    script: |
      const currencyFormat = new Intl.NumberFormat(undefined, {
        style: "currency",
        currency: ledger.ccy,
        maximumFractionDigits: 0,
      });
      const travels = [];
      const amounts = {};

      for (let row of panel.queries[0].result) {
        const tag = row.tags.find((tag) => tag.match(/\-\d{4}/));
        if (!(tag in amounts)) {
          travels.unshift(tag);
          amounts[tag] = 0;
        }
        amounts[tag] += row.value.number;
      }

      return {
        tooltip: {
          valueFormatter: currencyFormat.format,
        },
        grid: {
          left: "150px",
        },
        xAxis: {
          type: "value",
          axisLabel: {
            formatter: currencyFormat.format,
          },
        },
        yAxis: {
          type: "category",
          data: travels,
        },
        series: [
          {
            type: "bar",
            data: travels.map((travel) => amounts[travel]),
          },
        ],
        onClick: (event) => {
          const link = panel.queries[0].link.replaceAll("#", "%23").replace("{travel}", event.name);
          window.open(link);
        },
      };

- name: Sankey
  panels:
  - title: Sankey (per month) 💸
    height: 800px
    queries:
    - bql: |
        SELECT account, CONVERT(SUM(position), '{{ledger.ccy}}') AS value
        WHERE account ~ '^(Income|Expenses):'
        GROUP BY account
      link: /beancount/account/{account}/?time={time}
    type: d3_sankey
    script: |
      const currencyFormat = new Intl.NumberFormat(undefined, {
        style: "currency",
        currency: ledger.ccy,
        maximumFractionDigits: 0,
      });
      const days = (new Date(ledger.dateLast) - new Date(ledger.dateFirst)) / (1000 * 60 * 60 * 24) + 1;
      const divisor = days / (365 / 12);

      const nodes = [{ name: "Income" }];
      const links = [];
      function buildSankey(root) {
        for (let node of root.children) {
          let label = node.name.split(":").pop();

          // skip over pass-through accounts
          while (node.children.length === 1) {
            node = node.children[0];
            label += ":" + node.name.split(":").pop();
          }

          nodes.push({ name: node.name, label });
          if (node.name.startsWith("Income")) {
            links.push({ source: node.name, target: root.name, value: -node.value / divisor });
          } else {
            links.push({
              source: root.name == "Expenses" ? "Income" : root.name,
              target: node.name,
              value: node.value / divisor,
            });
          }
          buildSankey(node);
        }
      }

      const accountTree = helpers.buildAccountTree(panel.queries[0].result, (row) => row.value[ledger.ccy]);
      buildSankey(accountTree.children[0]);
      buildSankey(accountTree.children[1]);

      return {
        align: "left",
        valueFormatter: currencyFormat.format,
        data: {
          nodes,
          links,
        },
        onClick: (event, node) => {
          const time = new URLSearchParams(window.location.search).get("time") ?? "";
          const link = panel.queries[0].link.replaceAll("#", "%23").replace("{account}", node.name).replace("{time}", time);
          window.open(link);
        },
      };
